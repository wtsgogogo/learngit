<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\UVBuild\usbd_hid_composite.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\UVBuild\usbd_hid_composite.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Wed Aug 16 17:33:06 2023
<BR><P>
<H3>Maximum Stack Usage =        304 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
hidd_xfer_cb &rArr; tud_hid_report_complete_cb &rArr; tud_hid_n_mouse_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[a]">Default_Handler</a> from startup_asm.o(.text) referenced 43 times from startup_asm.o(RESET)
 <LI><a href="#[12]">EXTI_Handler</a> from soc_gpio.o(.text.EXTI_Handler) referenced 2 times from soc_gpio.o(.text.io_init)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from rom_sym.txt(ABSOLUTE) referenced from startup_asm.o(RESET)
 <LI><a href="#[16]">SWINT_Handler_ASM</a> from swint_asm.o(.text.SWINT_Handler_ASM) referenced 2 times from platform.o(.text.sys_init_none)
 <LI><a href="#[f]">SWINT_Handler_C</a> from platform.o(.text.SWINT_Handler_C) referenced from swint_asm.o(.text.SWINT_Handler_ASM)
 <LI><a href="#[9]">SysTick_Handler</a> from systick.o(.xip_banned.SysTick_Handler) referenced 2 times from systick.o(.text.systick_start)
 <LI><a href="#[9]">SysTick_Handler</a> from systick.o(.xip_banned.SysTick_Handler) referenced from startup_asm.o(RESET)
 <LI><a href="#[d]">SystemInit</a> from platform.o(.text.SystemInit) referenced from startup_asm.o(.text)
 <LI><a href="#[10]">USB_IRQHandler</a> from tusb_dcd.o(.text.USB_IRQHandler) referenced 2 times from tusb_dcd.o(.text.dcd_init)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[11]">V33_EXTI_Async_Handler</a> from soc_gpio.o(.text.V33_EXTI_Async_Handler) referenced 2 times from soc_gpio.o(.text.io_init)
 <LI><a href="#[e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_asm.o(.text)
 <LI><a href="#[15]">cpu_recover_asm</a> from sleep_asm.o(.xip_banned.sleep_recover_asm) referenced 2 times from sleep.o(.text.low_power_init)
 <LI><a href="#[17]">fputc</a> from log.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[17]">fputc</a> from log.o(.text.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[1b]">hidd_control_xfer_cb</a> from hid_device.o(.text.hidd_control_xfer_cb) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[18]">hidd_init</a> from hid_device.o(.text.hidd_init) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[1a]">hidd_open</a> from hid_device.o(.text.hidd_open) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[19]">hidd_reset</a> from hid_device.o(.text.hidd_reset) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[1c]">hidd_xfer_cb</a> from hid_device.o(.text.hidd_xfer_cb) referenced from usbd.o(.rodata._usbd_driver)
 <LI><a href="#[14]">log_hex_output</a> from log.o(.text.log_hex_output) referenced 2 times from log.o(.text.log_init)
 <LI><a href="#[13]">log_output</a> from log.o(.text.log_output) referenced 2 times from log.o(.text.log_init)
 <LI><a href="#[c]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[b]">usbd_int_set</a> from usbd.o(.text.usbd_int_set) referenced from usbd.o(.data._usbd_qdef)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_sym.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>arm_cm_delay_asm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_remote_wakeup
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_flash_init (via Veneer)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[98]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[99]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_reset
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_reset
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_init
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[77]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_string_cb
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[a5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[a6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[28]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[12]"></a>EXTI_Handler</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, soc_gpio.o(.text.EXTI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_exti_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_gpio.o(.text.io_init)
</UL>
<P><STRONG><a name="[40]"></a>HAL_USB_MSP_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, msp_usb.o(.text.HAL_USB_MSP_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_clear_stall
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_close_all
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_disable
</UL>

<P><STRONG><a name="[41]"></a>HAL_USB_MSP_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msp_usb.o(.text.HAL_USB_MSP_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_clear_stall
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_close_all
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_enable
</UL>

<P><STRONG><a name="[3f]"></a>HAL_USB_MSP_GetEnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, msp_usb.o(.text.HAL_USB_MSP_GetEnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_clear_stall
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_close_all
</UL>

<P><STRONG><a name="[4a]"></a>HAL_USB_MSP_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, msp_usb.o(.text.HAL_USB_MSP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_init
</UL>

<P><STRONG><a name="[65]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, segger_rtt.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[50]"></a>SEGGER_RTT_PutCharSkip</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, segger_rtt.o(.text.SEGGER_RTT_PutCharSkip))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_PutCharSkip
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[16]"></a>SWINT_Handler_ASM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, swint_asm.o(.text.SWINT_Handler_ASM))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.text.sys_init_none)
</UL>
<P><STRONG><a name="[f]"></a>SWINT_Handler_C</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, platform.o(.text.SWINT_Handler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SWINT_Handler_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swint_asm.o(.text.SWINT_Handler_ASM)
</UL>
<P><STRONG><a name="[d]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, platform.o(.text.SystemInit))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>V33_EXTI_Async_Handler</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, soc_gpio.o(.text.V33_EXTI_Async_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = V33_EXTI_Async_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_exti_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_gpio.o(.text.io_init)
</UL>
<P><STRONG><a name="[56]"></a>board_button_read</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp.o(.text.board_button_read))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_task
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_report_complete_cb
</UL>

<P><STRONG><a name="[33]"></a>board_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp.o(.text.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = board_init &rArr; sys_init_none &rArr; log_init &rArr; SEGGER_RTT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_pin
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_usb_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_none
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>board_led_write</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp.o(.text.board_led_write))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_clr_pin
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_set_report_cb
</UL>

<P><STRONG><a name="[3a]"></a>board_millis</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(.text.board_millis))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_get_value (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_task
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>dcd_connect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tusb_dcd.o(.text.dcd_connect))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_init
</UL>

<P><STRONG><a name="[3e]"></a>dcd_edpt_clear_stall</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tusb_dcd.o(.text.dcd_edpt_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dcd_edpt_clear_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_GetEnableIRQ
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_DisableIRQ
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_clear_stall
</UL>

<P><STRONG><a name="[42]"></a>dcd_edpt_close_all</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, tusb_dcd.o(.text.dcd_edpt_close_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcd_edpt_close_all
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_GetEnableIRQ
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_DisableIRQ
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[8a]"></a>dcd_edpt_open</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, tusb_dcd.o(.text.dcd_edpt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dcd_edpt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_open_edpt_pair
</UL>

<P><STRONG><a name="[43]"></a>dcd_edpt_stall</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tusb_dcd.o(.text.dcd_edpt_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dcd_edpt_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_GetEnableIRQ
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_DisableIRQ
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stall
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[44]"></a>dcd_edpt_xfer</STRONG> (Thumb, 564 bytes, Stack size 48 bytes, tusb_dcd.o(.text.dcd_edpt_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_GetEnableIRQ
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_DisableIRQ
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_EnableIRQ
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_xfer_in
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_xfer_out
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
</UL>

<P><STRONG><a name="[47]"></a>dcd_event_handler</STRONG> (Thumb, 736 bytes, Stack size 48 bytes, usbd.o(.text.dcd_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_edpt_n
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_xfer_out
</UL>

<P><STRONG><a name="[49]"></a>dcd_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tusb_dcd.o(.text.dcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_connect
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[4c]"></a>dcd_int_disable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tusb_dcd.o(.text.dcd_int_disable))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_set
</UL>

<P><STRONG><a name="[4d]"></a>dcd_int_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tusb_dcd.o(.text.dcd_int_enable))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_USB_MSP_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[32]"></a>dcd_int_handler</STRONG> (Thumb, 964 bytes, Stack size 48 bytes, tusb_dcd.o(.text.dcd_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dcd_int_handler &rArr; process_edpt_n &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_edpt_n
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>dcd_remote_wakeup</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tusb_dcd.o(.text.dcd_remote_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcd_remote_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_remote_wakeup
</UL>

<P><STRONG><a name="[85]"></a>dcd_set_address</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tusb_dcd.o(.text.dcd_set_address))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[17]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; SEGGER_RTT_PutCharSkip
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_PutCharSkip
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[55]"></a>hid_task</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, main.o(.text.hid_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = hid_task &rArr; tud_hid_n_keyboard_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_button_read
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_millis
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_remote_wakeup
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_keyboard_report
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_suspended
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>hidd_control_xfer_cb</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, hid_device.o(.text.hidd_control_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = hidd_control_xfer_cb &rArr; tud_control_xfer &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_get_report_cb
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_set_report_cb
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_status
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_descriptor_report_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[18]"></a>hidd_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hid_device.o(.text.hidd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hidd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[1a]"></a>hidd_open</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, hid_device.o(.text.hidd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = hidd_open &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_open_edpt_pair
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[19]"></a>hidd_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hid_device.o(.text.hidd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hidd_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[1c]"></a>hidd_xfer_cb</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, hid_device.o(.text.hidd_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = hidd_xfer_cb &rArr; tud_hid_report_complete_cb &rArr; tud_hid_n_mouse_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_report_complete_cb
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_set_report_cb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[36]"></a>io_cfg_output</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, soc_gpio.o(.text.io_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[39]"></a>io_clr_pin</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, soc_gpio.o(.text.io_clr_pin))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_write
</UL>

<P><STRONG><a name="[30]"></a>io_exti_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, soc_gpio.o(.text.io_exti_callback))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V33_EXTI_Async_Handler
</UL>

<P><STRONG><a name="[72]"></a>io_init</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, soc_gpio.o(.text.io_init))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_none
</UL>

<P><STRONG><a name="[37]"></a>io_set_pin</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, soc_gpio.o(.text.io_set_pin))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[14]"></a>log_hex_output</STRONG> (Thumb, 328 bytes, Stack size 36 bytes, log.o(.text.log_hex_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = log_hex_output &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(.text.log_init)
</UL>
<P><STRONG><a name="[64]"></a>log_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, log.o(.text.log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = log_init &rArr; SEGGER_RTT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_none
</UL>

<P><STRONG><a name="[13]"></a>log_output</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, log.o(.text.log_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = log_output &rArr; putc &rArr; fputc &rArr; SEGGER_RTT_PutCharSkip
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(.text.log_init)
</UL>
<P><STRONG><a name="[73]"></a>low_power_init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sleep.o(.text.low_power_init))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_none
</UL>

<P><STRONG><a name="[c]"></a>main</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = main &rArr; tud_task_ext &rArr; process_get_descriptor &rArr; tud_control_xfer &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_millis
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_task
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[35]"></a>pinmux_usb_init</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, soc_gpio.o(.text.pinmux_usb_init))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[34]"></a>sys_init_none</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, platform.o(.text.sys_init_none))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_init_none &rArr; log_init &rArr; SEGGER_RTT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_flash_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[74]"></a>systick_start</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, systick.o(.text.systick_start))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_none
</UL>

<P><STRONG><a name="[6f]"></a>tu_edpt_bind_driver</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tusb.o(.text.tu_edpt_bind_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tu_edpt_bind_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
</UL>

<P><STRONG><a name="[88]"></a>tu_edpt_claim</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tusb.o(.text.tu_edpt_claim))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
</UL>

<P><STRONG><a name="[89]"></a>tu_edpt_validate</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, tusb.o(.text.tu_edpt_validate))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_open_edpt_pair
</UL>

<P><STRONG><a name="[52]"></a>tu_fifo_advance_read_pointer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tusb_fifo.o(.text.tu_fifo_advance_read_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tu_fifo_advance_read_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_xfer_in
</UL>

<P><STRONG><a name="[54]"></a>tu_fifo_advance_write_pointer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tusb_fifo.o(.text.tu_fifo_advance_write_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tu_fifo_advance_write_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_xfer_out
</UL>

<P><STRONG><a name="[7d]"></a>tu_fifo_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tusb_fifo.o(.text.tu_fifo_clear))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[51]"></a>tu_fifo_get_read_info</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tusb_fifo.o(.text.tu_fifo_get_read_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tu_fifo_get_read_info
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_xfer_in
</UL>

<P><STRONG><a name="[53]"></a>tu_fifo_get_write_info</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, tusb_fifo.o(.text.tu_fifo_get_write_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tu_fifo_get_write_info
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_xfer_out
</UL>

<P><STRONG><a name="[75]"></a>tu_fifo_read</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tusb_fifo.o(.text.tu_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tu_fifo_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[48]"></a>tu_fifo_write</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tusb_fifo.o(.text.tu_fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>

<P><STRONG><a name="[5d]"></a>tud_control_status</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_control.o(.text.tud_control_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tud_control_status &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_control_xfer_cb
</UL>

<P><STRONG><a name="[5c]"></a>tud_control_xfer</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, usbd_control.o(.text.tud_control_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tud_control_xfer &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_control_xfer_cb
</UL>

<P><STRONG><a name="[6c]"></a>tud_descriptor_configuration_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_descriptors.o(.text.tud_descriptor_configuration_cb))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
</UL>

<P><STRONG><a name="[6b]"></a>tud_descriptor_device_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_descriptors.o(.text.tud_descriptor_device_cb))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
</UL>

<P><STRONG><a name="[6d]"></a>tud_descriptor_string_cb</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, usb_descriptors.o(.text.tud_descriptor_string_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tud_descriptor_string_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
</UL>

<P><STRONG><a name="[5b]"></a>tud_hid_descriptor_report_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb_descriptors.o(.text.tud_hid_descriptor_report_cb))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_control_xfer_cb
</UL>

<P><STRONG><a name="[5f]"></a>tud_hid_get_report_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.tud_hid_get_report_cb))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_control_xfer_cb
</UL>

<P><STRONG><a name="[59]"></a>tud_hid_n_keyboard_report</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, hid_device.o(.text.tud_hid_n_keyboard_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tud_hid_n_keyboard_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_task
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_report_complete_cb
</UL>

<P><STRONG><a name="[79]"></a>tud_hid_n_mouse_report</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, hid_device.o(.text.tud_hid_n_mouse_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tud_hid_n_mouse_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_report_complete_cb
</UL>

<P><STRONG><a name="[58]"></a>tud_hid_n_ready</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, hid_device.o(.text.tud_hid_n_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tud_hid_n_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_busy
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_suspended
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_mounted
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_task
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_report_complete_cb
</UL>

<P><STRONG><a name="[7c]"></a>tud_hid_n_report</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hid_device.o(.text.tud_hid_n_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tud_hid_n_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_claim
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_report_complete_cb
</UL>

<P><STRONG><a name="[62]"></a>tud_hid_report_complete_cb</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, main.o(.text.tud_hid_report_complete_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tud_hid_report_complete_cb &rArr; tud_hid_n_mouse_report &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_button_read
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_mouse_report
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_keyboard_report
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_xfer_cb
</UL>

<P><STRONG><a name="[5e]"></a>tud_hid_set_report_cb</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(.text.tud_hid_set_report_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tud_hid_set_report_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_led_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_xfer_cb
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_control_xfer_cb
</UL>

<P><STRONG><a name="[68]"></a>tud_init</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, usbd.o(.text.tud_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tud_init &rArr; dcd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_clear
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_enable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>tud_inited</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd.o(.text.tud_inited))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_inited
</UL>

<P><STRONG><a name="[70]"></a>tud_mount_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.tud_mount_cb))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
</UL>

<P><STRONG><a name="[7a]"></a>tud_mounted</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd.o(.text.tud_mounted))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_ready
</UL>

<P><STRONG><a name="[5a]"></a>tud_remote_wakeup</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd.o(.text.tud_remote_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tud_remote_wakeup &rArr; dcd_remote_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_remote_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_task
</UL>

<P><STRONG><a name="[57]"></a>tud_suspended</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd.o(.text.tud_suspended))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_task
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_ready
</UL>

<P><STRONG><a name="[69]"></a>tud_task_ext</STRONG> (Thumb, 1712 bytes, Stack size 64 bytes, usbd.o(.text.tud_task_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tud_task_ext &rArr; process_get_descriptor &rArr; tud_control_xfer &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_stall
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_set_request
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_clear_stall
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_reset
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_set_complete_callback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_set_config
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configuration_reset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_descriptor
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_inited
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_umount_cb
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_status
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_close_all
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_set_address
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>tud_umount_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.tud_umount_cb))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[7e]"></a>tusb_inited</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tusb.o(.text.tusb_inited))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_inited
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[80]"></a>usbd_control_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_control.o(.text.usbd_control_reset))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[7f]"></a>usbd_control_set_complete_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_control.o(.text.usbd_control_set_complete_callback))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[84]"></a>usbd_control_set_request</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_control.o(.text.usbd_control_set_request))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[82]"></a>usbd_control_xfer_cb</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, usbd_control.o(.text.usbd_control_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = usbd_control_xfer_cb &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[7b]"></a>usbd_edpt_busy</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbd.o(.text.usbd_edpt_busy))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_ready
</UL>

<P><STRONG><a name="[78]"></a>usbd_edpt_claim</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbd.o(.text.usbd_edpt_claim))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_mouse_report
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_keyboard_report
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
</UL>

<P><STRONG><a name="[83]"></a>usbd_edpt_clear_stall</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbd.o(.text.usbd_edpt_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_edpt_clear_stall &rArr; dcd_edpt_clear_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[86]"></a>usbd_edpt_stall</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbd.o(.text.usbd_edpt_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_edpt_stall &rArr; dcd_edpt_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[61]"></a>usbd_edpt_xfer</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usbd.o(.text.usbd_edpt_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_xfer_cb
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_status
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_open
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_mouse_report
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_keyboard_report
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_hid_n_report
</UL>

<P><STRONG><a name="[b]"></a>usbd_int_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd.o(.text.usbd_int_set))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_disable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd.o(.data._usbd_qdef)
</UL>
<P><STRONG><a name="[60]"></a>usbd_open_edpt_pair</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, usbd.o(.text.usbd_open_edpt_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_open_edpt_pair &rArr; dcd_edpt_open
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_validate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hidd_open
</UL>

<P><STRONG><a name="[8b]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a8]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[63]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex_output
</UL>

<P><STRONG><a name="[a9]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[aa]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[8d]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ab]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[ac]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[ad]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[66]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_output
</UL>

<P><STRONG><a name="[ae]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[af]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[67]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(i.putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = putc &rArr; fputc &rArr; SEGGER_RTT_PutCharSkip
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_output
</UL>

<P><STRONG><a name="[1d]"></a>cpu_sleep_asm</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sleep_asm.o(.xip_banned.sleep_recover_asm), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;before_wfi
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_msp_psp_control
</UL>

<P><STRONG><a name="[15]"></a>cpu_recover_asm</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sleep_asm.o(.xip_banned.sleep_recover_asm))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_wfi
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_msp_psp_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(.text.low_power_init)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(.xip_banned.SysTick_Handler))
<BR>[Address Reference Count : 2]<UL><LI> systick.o(.text.systick_start)
<LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>after_wfi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sleep.o(.xip_banned.after_wfi))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_recover_asm
</UL>

<P><STRONG><a name="[94]"></a>before_wfi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sleep.o(.xip_banned.before_wfi), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sleep_asm
</UL>

<P><STRONG><a name="[71]"></a>clk_flash_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, platform.o(.xip_banned.clk_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clk_flash_init
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_none (via Veneer)
</UL>

<P><STRONG><a name="[95]"></a>restore_msp_psp_control</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sleep.o(.xip_banned.restore_msp_psp_control))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_recover_asm
</UL>

<P><STRONG><a name="[93]"></a>store_msp_psp_control</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sleep.o(.xip_banned.store_msp_psp_control), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sleep_asm
</UL>

<P><STRONG><a name="[3b]"></a>systick_get_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(.xip_banned.systick_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_millis (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10]"></a>USB_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tusb_dcd.o(.text.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USB_IRQHandler &rArr; dcd_int_handler &rArr; process_edpt_n &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusb_dcd.o(.text.dcd_init)
</UL>
<P><STRONG><a name="[45]"></a>handle_xfer_out</STRONG> (Thumb, 826 bytes, Stack size 72 bytes, tusb_dcd.o(.text.handle_xfer_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_advance_write_pointer
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_get_write_info
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_edpt_n
</UL>

<P><STRONG><a name="[46]"></a>handle_xfer_in</STRONG> (Thumb, 592 bytes, Stack size 48 bytes, tusb_dcd.o(.text.handle_xfer_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = handle_xfer_in &rArr; tu_fifo_get_read_info
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_advance_read_pointer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_fifo_get_read_info
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_edpt_n
</UL>

<P><STRONG><a name="[4e]"></a>process_edpt_n</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tusb_dcd.o(.text.process_edpt_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = process_edpt_n &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_xfer_in
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_xfer_out
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_int_handler
</UL>

<P><STRONG><a name="[6a]"></a>process_get_descriptor</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usbd.o(.text.process_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = process_get_descriptor &rArr; tud_control_xfer &rArr; usbd_edpt_xfer &rArr; dcd_edpt_xfer &rArr; handle_xfer_out &rArr; dcd_event_handler &rArr; tu_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_string_cb
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_configuration_cb
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_device_cb
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_control_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[3c]"></a>configuration_reset</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, usbd.o(.text.configuration_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = configuration_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[6e]"></a>process_set_config</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, usbd.o(.text.process_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = process_set_config &rArr; tu_edpt_bind_driver
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_descriptor_configuration_cb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tu_edpt_bind_driver
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_mount_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task_ext
</UL>

<P><STRONG><a name="[a]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8c]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[91]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[90]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
