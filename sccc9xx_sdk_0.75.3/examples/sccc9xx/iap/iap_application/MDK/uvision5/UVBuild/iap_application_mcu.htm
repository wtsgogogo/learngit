<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\UVBuild\iap_application_mcu.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\UVBuild\iap_application_mcu.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Wed Jul 12 10:33:59 2023
<BR><P>
<H3>Maximum Stack Usage =         72 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; HAL_UART_Transmit &rArr; systick_poll_timeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[a]">Default_Handler</a> from startup_asm.o(.text) referenced 43 times from startup_asm.o(RESET)
 <LI><a href="#[16]">EXTI_Handler</a> from soc_gpio.o(.text.EXTI_Handler) referenced 2 times from soc_gpio.o(.text.io_init)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from rom_sym.txt(ABSOLUTE) referenced from startup_asm.o(RESET)
 <LI><a href="#[1a]">SWINT_Handler_ASM</a> from swint_asm.o(.text.SWINT_Handler_ASM) referenced 2 times from platform.o(.text.sys_init_none)
 <LI><a href="#[14]">SWINT_Handler_C</a> from platform.o(.text.SWINT_Handler_C) referenced from swint_asm.o(.text.SWINT_Handler_ASM)
 <LI><a href="#[9]">SysTick_Handler</a> from systick.o(.xip_banned.SysTick_Handler) referenced 2 times from systick.o(.text.systick_start)
 <LI><a href="#[9]">SysTick_Handler</a> from systick.o(.xip_banned.SysTick_Handler) referenced from startup_asm.o(RESET)
 <LI><a href="#[c]">SystemInit</a> from platform.o(.text.SystemInit) referenced from startup_asm.o(.text)
 <LI><a href="#[e]">UART1_Handler</a> from msp_uart.o(.text.UART1_Handler) referenced 2 times from msp_uart.o(.text.HAL_UART_MSP_Init)
 <LI><a href="#[f]">UART2_Handler</a> from msp_uart.o(.text.UART2_Handler) referenced 2 times from msp_uart.o(.text.HAL_UART_MSP_Init)
 <LI><a href="#[10]">UART3_Handler</a> from msp_uart.o(.text.UART3_Handler) referenced 2 times from msp_uart.o(.text.HAL_UART_MSP_Init)
 <LI><a href="#[11]">UART4_Handler</a> from msp_uart.o(.text.UART4_Handler) referenced 2 times from msp_uart.o(.text.HAL_UART_MSP_Init)
 <LI><a href="#[12]">UART5_Handler</a> from msp_uart.o(.text.UART5_Handler) referenced 2 times from msp_uart.o(.text.HAL_UART_MSP_Init)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_asm.o(.text) referenced from startup_asm.o(RESET)
 <LI><a href="#[15]">V33_EXTI_Async_Handler</a> from soc_gpio.o(.text.V33_EXTI_Async_Handler) referenced 2 times from soc_gpio.o(.text.io_init)
 <LI><a href="#[d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_asm.o(.text)
 <LI><a href="#[19]">cpu_recover_asm</a> from sleep_asm.o(.xip_banned.sleep_recover_asm) referenced 2 times from sleep.o(.text.low_power_init)
 <LI><a href="#[1b]">fputc</a> from log.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1b]">fputc</a> from log.o(.text.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[18]">log_hex_output</a> from log.o(.text.log_hex_output) referenced 2 times from log.o(.text.log_init)
 <LI><a href="#[17]">log_output</a> from log.o(.text.log_output) referenced 2 times from log.o(.text.log_init)
 <LI><a href="#[b]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[13]">uart_flag_poll</a> from hal_uart.o(.text.uart_flag_poll) referenced 4 times from hal_uart.o(.text.HAL_UART_Transmit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[69]"></a>qspiv2_stg_read_write</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start (via Veneer)
</UL>

<P><STRONG><a name="[66]"></a>enter_critical</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start (via Veneer)
</UL>

<P><STRONG><a name="[6d]"></a>exit_critical</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start (via Veneer)
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_sym.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>arm_cm_delay_asm</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_flash_init (via Veneer)
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[63]"></a>_hal_flash_erase_operation</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_page_erase (via Veneer)
</UL>

<P><STRONG><a name="[d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[71]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[72]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[73]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[74]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[75]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[7c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[7d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[27]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[16]"></a>EXTI_Handler</STRONG> (Thumb, 522 bytes, Stack size 16 bytes, soc_gpio.o(.text.EXTI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_exti_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_gpio.o(.text.io_init)
</UL>
<P><STRONG><a name="[3f]"></a>HAL_UART_BaudRateDetectCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_uart.o(.text.HAL_UART_BaudRateDetectCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>

<P><STRONG><a name="[42]"></a>HAL_UART_DMA_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_uart_dma.o(.text.HAL_UART_DMA_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT_DMA
</UL>

<P><STRONG><a name="[30]"></a>HAL_UART_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Busy_Set
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>HAL_UART_MSP_Busy_Set</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, msp_uart.o(.text.HAL_UART_MSP_Busy_Set))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_status_set
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_status_set
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_status_set
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_status_set
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_status_set
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[31]"></a>HAL_UART_MSP_Init</STRONG> (Thumb, 380 bytes, Stack size 0 bytes, msp_uart.o(.text.HAL_UART_MSP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[39]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[38]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, main.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>

<P><STRONG><a name="[3a]"></a>HAL_UART_Transmit</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; systick_poll_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_poll_timeout (via Veneer)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_get_value (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, hal_uart.o(.text.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>HAL_UARTx_IRQHandler</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, hal_uart.o(.text.HAL_UARTx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UARTx_IRQHandler &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT_DMA
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_BaudRateDetectCpltCallback
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>

<P><STRONG><a name="[46]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, segger_rtt.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[43]"></a>SEGGER_RTT_PutCharSkip</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, segger_rtt.o(.text.SEGGER_RTT_PutCharSkip))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_PutCharSkip
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1a]"></a>SWINT_Handler_ASM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, swint_asm.o(.text.SWINT_Handler_ASM))
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.text.sys_init_none)
</UL>
<P><STRONG><a name="[14]"></a>SWINT_Handler_C</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, platform.o(.text.SWINT_Handler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SWINT_Handler_C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> swint_asm.o(.text.SWINT_Handler_ASM)
</UL>
<P><STRONG><a name="[c]"></a>SystemInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, platform.o(.text.SystemInit))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>UART1_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msp_uart.o(.text.UART1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART1_Handler &rArr; HAL_UARTx_IRQHandler &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msp_uart.o(.text.HAL_UART_MSP_Init)
</UL>
<P><STRONG><a name="[f]"></a>UART2_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msp_uart.o(.text.UART2_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART2_Handler &rArr; HAL_UARTx_IRQHandler &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msp_uart.o(.text.HAL_UART_MSP_Init)
</UL>
<P><STRONG><a name="[10]"></a>UART3_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msp_uart.o(.text.UART3_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART3_Handler &rArr; HAL_UARTx_IRQHandler &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msp_uart.o(.text.HAL_UART_MSP_Init)
</UL>
<P><STRONG><a name="[11]"></a>UART4_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msp_uart.o(.text.UART4_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART4_Handler &rArr; HAL_UARTx_IRQHandler &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msp_uart.o(.text.HAL_UART_MSP_Init)
</UL>
<P><STRONG><a name="[12]"></a>UART5_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msp_uart.o(.text.UART5_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART5_Handler &rArr; HAL_UARTx_IRQHandler &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msp_uart.o(.text.HAL_UART_MSP_Init)
</UL>
<P><STRONG><a name="[3e]"></a>UART_Transmit_IT_DMA</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_uart_dma.o(.text.UART_Transmit_IT_DMA))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMA_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTx_IRQHandler
</UL>

<P><STRONG><a name="[15]"></a>V33_EXTI_Async_Handler</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, soc_gpio.o(.text.V33_EXTI_Async_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = V33_EXTI_Async_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_exti_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_gpio.o(.text.io_init)
</UL>
<P><STRONG><a name="[1b]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; SEGGER_RTT_PutCharSkip
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_PutCharSkip
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[4a]"></a>io_cfg_output</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, soc_gpio.o(.text.io_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>io_exti_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, soc_gpio.o(.text.io_exti_callback))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;V33_EXTI_Async_Handler
</UL>

<P><STRONG><a name="[53]"></a>io_init</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, soc_gpio.o(.text.io_init))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_none
</UL>

<P><STRONG><a name="[4d]"></a>io_pull_write</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, soc_gpio.o(.text.io_pull_write))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>io_toggle_pin</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, soc_gpio.o(.text.io_toggle_pin))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>io_write_pin</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, soc_gpio.o(.text.io_write_pin))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18]"></a>log_hex_output</STRONG> (Thumb, 328 bytes, Stack size 36 bytes, log.o(.text.log_hex_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = log_hex_output &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(.text.log_init)
</UL>
<P><STRONG><a name="[45]"></a>log_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, log.o(.text.log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = log_init &rArr; SEGGER_RTT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_none
</UL>

<P><STRONG><a name="[17]"></a>log_output</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, log.o(.text.log_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = log_output &rArr; putc &rArr; fputc &rArr; SEGGER_RTT_PutCharSkip
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log.o(.text.log_init)
</UL>
<P><STRONG><a name="[54]"></a>low_power_init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sleep.o(.text.low_power_init))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_none
</UL>

<P><STRONG><a name="[b]"></a>main</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = main &rArr; HAL_UART_Transmit &rArr; systick_poll_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_none
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pull_write
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmux_uart1_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_toggle_pin
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write_pin
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_cfg_output
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_page_erase (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4c]"></a>pinmux_uart1_init</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, soc_gpio.o(.text.pinmux_uart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pinmux_uart1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>sys_init_none</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, platform.o(.text.sys_init_none))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_init_none &rArr; log_init &rArr; SEGGER_RTT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_start
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_power_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_flash_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>systick_start</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, systick.o(.text.systick_start))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_none
</UL>

<P><STRONG><a name="[33]"></a>uart1_status_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_stat.o(.text.uart1_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Busy_Set
</UL>

<P><STRONG><a name="[34]"></a>uart2_status_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_stat.o(.text.uart2_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Busy_Set
</UL>

<P><STRONG><a name="[35]"></a>uart3_status_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_stat.o(.text.uart3_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Busy_Set
</UL>

<P><STRONG><a name="[36]"></a>uart4_status_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_stat.o(.text.uart4_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Busy_Set
</UL>

<P><STRONG><a name="[37]"></a>uart5_status_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_stat.o(.text.uart5_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MSP_Busy_Set
</UL>

<P><STRONG><a name="[56]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7f]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[44]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_hex_output
</UL>

<P><STRONG><a name="[80]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[81]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[58]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[82]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[83]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[84]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[47]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_output
</UL>

<P><STRONG><a name="[85]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[86]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[87]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[48]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(i.putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = putc &rArr; fputc &rArr; SEGGER_RTT_PutCharSkip
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_output
</UL>

<P><STRONG><a name="[1c]"></a>cpu_sleep_asm</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sleep_asm.o(.xip_banned.sleep_recover_asm), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;before_wfi
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_msp_psp_control
</UL>

<P><STRONG><a name="[19]"></a>cpu_recover_asm</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sleep_asm.o(.xip_banned.sleep_recover_asm))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;after_wfi
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_msp_psp_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(.text.low_power_init)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(.xip_banned.SysTick_Handler))
<BR>[Address Reference Count : 2]<UL><LI> startup_asm.o(RESET)
<LI> systick.o(.text.systick_start)
</UL>
<P><STRONG><a name="[61]"></a>after_wfi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sleep.o(.xip_banned.after_wfi))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_recover_asm
</UL>

<P><STRONG><a name="[5f]"></a>before_wfi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sleep.o(.xip_banned.before_wfi), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sleep_asm
</UL>

<P><STRONG><a name="[52]"></a>clk_flash_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, platform.o(.xip_banned.clk_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clk_flash_init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cm_delay_asm (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_none (via Veneer)
</UL>

<P><STRONG><a name="[6f]"></a>disable_global_irq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.xip_banned.disable_global_irq))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_assert
</UL>

<P><STRONG><a name="[67]"></a>hal_flash_dual_mode_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_flash.o(.xip_banned.hal_flash_dual_mode_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
</UL>

<P><STRONG><a name="[51]"></a>hal_flash_page_erase</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rom_flash_api_wrapper.o(.xip_banned.hal_flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_flash_page_erase &rArr; hal_flash_xip_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_hal_flash_erase_operation (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[64]"></a>hal_flash_xip_start</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hal_flash_qspiv2.o(.xip_banned.hal_flash_xip_start), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspiv2_direct_quad_read_config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_assert
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspiv2_direct_dual_read_config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_status_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_status_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_dual_mode_get
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspiv2_stg_read_write (via Veneer)
</UL>

<P><STRONG><a name="[65]"></a>hal_flash_xip_status_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_flash.o(.xip_banned.hal_flash_xip_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
</UL>

<P><STRONG><a name="[6c]"></a>hal_flash_xip_status_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_flash.o(.xip_banned.hal_flash_xip_status_set))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
</UL>

<P><STRONG><a name="[62]"></a>hal_flash_xip_stop</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, hal_flash_qspiv2.o(.xip_banned.hal_flash_xip_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_flash_xip_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_for_xip_stop
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_assert
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_status_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_status_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_dual_mode_get
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_critical (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_critical (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspiv2_stg_read_write (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_page_erase
</UL>

<P><STRONG><a name="[68]"></a>qspiv2_direct_dual_read_config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hal_qspiv2.o(.xip_banned.qspiv2_direct_dual_read_config), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
</UL>

<P><STRONG><a name="[6b]"></a>qspiv2_direct_quad_read_config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_qspiv2.o(.xip_banned.qspiv2_direct_quad_read_config), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
</UL>

<P><STRONG><a name="[6a]"></a>ram_assert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dbg.o(.xip_banned.ram_assert))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_global_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_start
</UL>

<P><STRONG><a name="[60]"></a>restore_msp_psp_control</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sleep.o(.xip_banned.restore_msp_psp_control))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_recover_asm
</UL>

<P><STRONG><a name="[5e]"></a>store_msp_psp_control</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sleep.o(.xip_banned.store_msp_psp_control), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sleep_asm
</UL>

<P><STRONG><a name="[6e]"></a>sync_for_xip_stop</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, platform.o(.xip_banned.sync_for_xip_stop))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_xip_stop
</UL>

<P><STRONG><a name="[3b]"></a>systick_get_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(.xip_banned.systick_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_poll_timeout
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit (via Veneer)
</UL>

<P><STRONG><a name="[3c]"></a>systick_poll_timeout</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, systick.o(.xip_banned.systick_poll_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = systick_poll_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[13]"></a>uart_flag_poll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_uart.o(.text.uart_flag_poll))
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(.text.HAL_UART_Transmit)
</UL>
<P><STRONG><a name="[a]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_asm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_asm.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[57]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[5c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
